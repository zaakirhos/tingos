print('Hello R')
install.packages("tidyverse")
install.packages("tidyverse")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
printf("Hello")
print("Hello")
name = "Jonny"
8 %/% 3 # Integer division
8 / 3 # Not integer division, gives floating number
# Variables
num = 45
typeof(num)
storage.mode(num) # Also gives the type
mode(num) # Classification of objects, i.e. 'numeric', 'character', or 'logical'
class(num) # Also the classfication of objects
num2 = 4.5
class(num2)
name = "Jonny"
typeof(name) # character. Equivalent to string
class(name) # for type character, class is also character
is.character(name)
x = as.integer(10)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
install.packages('tinytex')
install.packages("tinytex")
tinytex::install_tinytex()
install.packages("tidyverse")
babynames
install.packages("babynames")
babynames
Duplicate chunk label 'setup', which has been used for the chunk:
library(babynames)
# Here select picks up the state and murders columns.
arrange(df, desc(murders)) %>% select(state, murders) %>% head(3) # Top 3 states with heighest murders.
#Pipeline operator (%>%). Handy when applying sequence of operations on dataframe. Pass the result from one
#function to another. Works from left to right. The result from left is the dataframe argument for the right.
arrange(df, murders) %>% select(state, murders) # the 'state' in select() is not the df; it come from the left.
# Here select picks up the state and murders columns.
arrange(df, desc(murders)) %>% select(state, murders) %>% head(3) # Top 3 states with heighest murders.
# This package provides some inttuitive functionalities to manage data frame
# It does not bring any new functionalities to R, but simplifies the existing R functionalitites.
# Importing package
library(dplyr)
#select function. Used to subset the data with specific rows
df <- read.csv('data/murders.csv')
df
str(df) # with str is a compact way to display an R object
dim(df)
names(df) #Names of the columns
str(df) # The structure of the dataframe
head(df) # returns first 6 rows by default. Can specify row numbers
tail(df) #returns last 6 rows by default. Can specify row numbers
# 'state[c(state, population)]' The columns are said to be not found. So, the select function is needed.
select(df, abb:population) # individual columns can also be passed
select(df,-(abb:population)) # With parenthesis, multiple columns can be excluded.
#filter function. filter(df, condition, ...)
filter(df, murders>100) # Returns the observations that meets the condition. Can have complex condition.
#arrange function. This orders data with the given column.
arrange(df, murders) # sorted in ascending with murders number
arrange(df, desc(murders)) # In descending
#rename function. Used to rename column name
rename(df, abbreviation=abb) # renames 'abb' to 'abbreviation'. Can rename multiple.
#mutate function. Used to add columns (can be derived from exising) or change existing ones.
mutate(df, murder_to_pop_ratio=murders/population)
transmute(df, murder_to_pop_ratio=murders/population) # Similar to mutate, but this drops all other cols
#except the newly created one.
#group_by function. returns the group (all the distinct values) of a column
group_by(df, region)  # region = 4: south, north, west, east.
# summarize. Often used in conjunction with the group_by
summarize((group_by(df, region)), sum(murders)) # sum of murders from all states in each region.
# mean, median, max, min, etc., can be in the place of sum
#Pipeline operator (%>%). Handy when applying sequence of operations on dataframe. Pass the result from one
#function to another. Works from left to right. The result from left is the dataframe argument for the right.
arrange(df, murders) %>% select(state, murders) # the 'state' in select() is not the df; it come from the left.
# Here select picks up the state and murders columns.
arrange(df, desc(murders)) %>% select(state, murders) %>% head(3) # Top 3 states with heighest murders.
# This package provides some inttuitive functionalities to manage data frame
# It does not bring any new functionalities to R, but simplifies the existing R functionalitites.
# Importing package
library(dplyr)
#select function. Used to subset the data with specific rows
df <- read.csv('data/murders.csv')
df
str(df) # with str is a compact way to display an R object
dim(df)
names(df) #Names of the columns
str(df) # The structure of the dataframe
head(df) # returns first 6 rows by default. Can specify row numbers
tail(df) #returns last 6 rows by default. Can specify row numbers
# 'state[c(state, population)]' The columns are said to be not found. So, the select function is needed.
select(df, abb:population) # individual columns can also be passed
select(df,-(abb:population)) # With parenthesis, multiple columns can be excluded.
#filter function. filter(df, condition, ...)
filter(df, murders>100) # Returns the observations that meets the condition. Can have complex condition.
#arrange function. This orders data with the given column.
arrange(df, murders) # sorted in ascending with murders number
arrange(df, desc(murders)) # In descending
#rename function. Used to rename column name
rename(df, abbreviation=abb) # renames 'abb' to 'abbreviation'. Can rename multiple.
#mutate function. Used to add columns (can be derived from exising) or change existing ones.
mutate(df, murder_to_pop_ratio=murders/population)
transmute(df, murder_to_pop_ratio=murders/population) # Similar to mutate, but this drops all other cols
#except the newly created one.
#group_by function. returns the group (all the distinct values) of a column
group_by(df, region)  # region = 4: south, north, west, east.
# summarize. Often used in conjunction with the group_by
summarize((group_by(df, region)), sum(murders)) # sum of murders from all states in each region.
# mean, median, max, min, etc., can be in the place of sum
#Pipeline operator (%>%). Handy when applying sequence of operations on dataframe. Pass the result from one
#function to another. Works from left to right. The result from left is the dataframe argument for the right.
arrange(df, murders) %>% select(state, murders) # the 'state' in select() is not the df; it come from the left.
# Here select picks up the state and murders columns.
arrange(df, desc(murders)) %>% select(state, murders) %>% head(3) # Top 3 states with heighest murders.
# Importing package
library(dplyr)
# Importing package
library(dplyr)
#select function. Used to subset the data with specific rows
df <- read.csv('data/murders.csv')
# Importing package
library(dplyr)
#select function. Used to subset the data with specific rows
df <- read.csv('data/murders.csv')
df
#select function. Used to subset the data with specific rows
df <- read.csv('/data/murders.csv')
#select function. Used to subset the data with specific rows
df <- read.csv('./data/murders.csv')
#select function. Used to subset the data with specific rows
df <- read.csv("data/murders.csv")
df
str(df) # with str is a compact way to display an R object
# Importing package
library(dplyr)
#select function. Used to subset the data with specific rows
df <- read.csv(file.path("f:", "data/murders.csv"))
# Importing package
library(dplyr)
#select function. Used to subset the data with specific rows
df <- read.csv('data/murders.csv')
df
print('Hello R')
# Unique operators
2 ** 4 # power
2 ^ 3 # this works to
2 ^ .5 # can have floating with out the 0
14 %% 4 # Modulus
8 %/% 3 # Integer division
8 / 3 # Not integer division, gives floating number
# Variables
num = 45
typeof(num)
storage.mode(num) # Also gives the type
mode(num) # Classification of objects, i.e. 'numeric', 'character', or 'logical'
class(num) # Also the classfication of objects
num2 = 4.5
class(num2)
name = "Jonny"
id <- c(101,102,103)
name <-c('Bob', 'Alice', 'John')
score <- c(78.25, 89.35, 90.9)
students <-data.frame(id, name, score)
students
write.csv(students, file='data/students.csv' )
write.csv(students, file='students.csv' )
id <- c(101,102,103)
name <-c('Bob', 'Alice', 'John')
score <- c(78.25, 89.35, 90.9)
students <-data.frame(id, name, score)
students
write.csv(students, file='students.csv' )
write.csv(students, file='/students.csv' )
write.csv(students, file='students.csv' )
setwd("~/Documents/Tech/my-code-pot/R")
id <- c(101,102,103)
name <-c('Bob', 'Alice', 'John')
score <- c(78.25, 89.35, 90.9)
students <-data.frame(id, name, score)
students
write.csv(students, file='data/students.csv' )
# Importing package
library(dplyr)
#select function. Used to subset the data with specific rows
df <- read.csv('data/murders.csv')
setwd("~/Documents/Tech/my-code-pot/R/Learning")
# Importing package
library(dplyr)
#select function. Used to subset the data with specific rows
df <- read.csv('data/murders.csv')
df
str(df) # with str is a compact way to display an R object
dim(df)
names(df) #Names of the columns
str(df) # The structure of the dataframe
head(df) # returns first 6 rows by default. Can specify row numbers
tail(df) #returns last 6 rows by default. Can specify row numbers
select(df, abb:population) # individual columns can also be passed
select(df,-(abb:population)) # With parenthesis, multiple columns can be excluded.
#filter function. filter(df, condition, ...)
filter(df, murders>100) # Returns the observations that meets the condition. Can have complex condition.
#arrange function. This orders data with the given column.
arrange(df, murders) # sorted in ascending with murders number
arrange(df, desc(murders)) # In descending
#rename function. Used to rename column name
rename(df, abbreviation=abb) # renames 'abb' to 'abbreviation'. Can rename multiple.
#mutate function. Used to add columns (can be derived from exising) or change existing ones.
mutate(df, murder_to_pop_ratio=murders/population)
